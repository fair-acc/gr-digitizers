/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(utils.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(f99113df75d8cd56758f0ebc7634a68c)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <pulsed_power_daq/utils.h>
// pydoc.h is automatically generated in the build directory
#include <utils_pydoc.h>

void bind_utils(py::module& m)
{




        m.def("get_timestamp_nano_utc",&::gr::pulsed_power_daq::get_timestamp_nano_utc,
            D(get_timestamp_nano_utc)
        );


        m.def("get_timestamp_milli_utc",&::gr::pulsed_power_daq::get_timestamp_milli_utc,
            D(get_timestamp_milli_utc)
        );


        m.def("to_hex_string",&::gr::pulsed_power_daq::to_hex_string,
            py::arg("value"),
            D(to_hex_string)
        );


        m.def("to_string",&::gr::pulsed_power_daq::to_string,
            py::arg("ec"),
            D(to_string)
        );


        m.def("make_peak_info_tag",&::gr::pulsed_power_daq::make_peak_info_tag,
            py::arg("frequency"),
            py::arg("stdev"),
            D(make_peak_info_tag)
        );


        m.def("decode_peak_info_tag",&::gr::pulsed_power_daq::decode_peak_info_tag,
            py::arg("tag"),
            py::arg("frequency"),
            py::arg("stdev"),
            D(decode_peak_info_tag)
        );



}








