module: digitizers
block: edge_trigger
label: edge_trigger
blocktype: block

parameters:
-   id: samp_rate
    label: Sample Rate
    dtype: rf32
-   id: lo
    label: Lo
    dtype: rf32
-   id: hi
    label: Hi
    dtype: rf32
-   id: initial_state
    label: Initial State
    dtype: rf32
-   id: send_udp
    label: Send UDP
    dtype: bool
    settable: true
-   id: host_list
    label: Host List
    dtype: string
    #container: vector // TODO(PORT) this breaks in the generated edge_trigger.cc
-   id: send_up_on_raising_edge
    label: Send UDP on Raising Edge
    dtype: bool
-   id: timeout
    label: Timeout
    dtype: rf32
    
ports:
-   domain: stream
    id: in
    direction: input
    type: rf32

-   domain: stream
    id: out
    direction: output
    type: rf32

implementations:
-   id: cpu

file_format: 1

doc:
  brief: Edge detector with UDP notifications
  detail: |-
        Outputs value one or zero based on a threshold values (hi, lo), similar to GR's Threshold
        block. That is if the value of input signal exceeds the the threshold value hi, value one
        is send down the stream and if input signal goes below low threshold value zero is send
        down the stream.

        This feature allows the users to compare actual signal and the state detected by this block.
                                                  ______________
                                                 |              |
        ------+--------------------------------->|              |
              |     ______________               |   Qt GUI     |
              |    |              |          +-->|              |
              |    |              |          |   |______________|
              +--->| Edge Trigger |----------+
                   |              |
                   |______________|

        In addition, whenever a FIRST rising or falling edge is detected following a trigger event
        (determined based on the trigger tag), an UDP datagram is send to all receiving host. The
        format of the datagram is shown below:

        \code
        <edgeDetect
               edge="rising"
               val="0.6545"
               timingEventTimeStamp="<timestamp>"
               retriggerEventTimeStamp="<timestamp>"
               delaySinceLastTimingEvent="<delay in nanoseconds>"
               samplesSinceLastTimingEvent="<samples>" />
        \endcode

        In order to get precise trigger timestamp this block waits to receive a WR tag before it sends
        an edge_detect tag down the stream or sends out an UDP datagram.

        Note all timestamps are assumed to be integers, namely int64_t, representing number of
        nanoseconds since UNIX epoch (UTC nanoseconds).

        This block uses the absolute timestamp of the last trigger event (wr_event.timestamp) and number
        of samples passed since then to calculate retrigger event timestamp and delay.


                    [wr_event]
        [trigger]       |      +--------------------+
           |            |      |                    |
        ---+-------------------+                    +----------------- (input signal)

           <----- delay ------>

        Note, user delay provided with the acq_info tag is accounted for when calculating the absolute
        timestamp of the retrigger event:

        retriggerEventTimeStamp = timingEventTimeStamp + detected_delay + user_delay

        This is needed because the timestamp of the timing event does not contain a component (user delay)
        foreseen to be used to compensate for cable delays and similar.

        Pre-trigger samples are ignored because this block cannot work with negative delays.

        This block generates the following tag:
         - edge_detect
        Note this tag might not be attached to the exact offset where the edge has been detected but at
        some point later when a WR event tag is received. Tag propagation policy is set to TPP_DONT.

        Output port is optional.
